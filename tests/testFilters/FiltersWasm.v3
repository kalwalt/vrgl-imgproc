def some_data_out() -> Pointer {
    var input: Array<byte> = [108, 222, 120, 123, 127, 221, 210, 124, 87, 127, 120, 23, 27, 221, 210, 124, 58, 25, 120, 23, 27, 221, 210, 124];
    return Pointer.atContents(input);
}

def malloc_u8(size: int) -> Pointer {
    var Arr: Array<byte> = Array<byte>.new(size);
    return Pointer.atContents(Arr);
}

def imgProc_invert(width: int, height: int, channels: u8, inputData: Pointer) -> Pointer {
    var imgProc = ImgProc.new(width, height, channels);
    var inputData_size = width * height * channels;
    var internal_data: Array<byte> = Array<byte>.new(inputData_size);
    for (i = 0; i < inputData_size; i++) {
        internal_data[i] = (inputData + i).load<byte>();
    }
    return Pointer.atContents(imgProc.invert(internal_data));
}

def imgProc_gray(width: int, height: int, channels: u8, inputData: Pointer) -> Pointer {
    var imgProc = ImgProc.new(width, height, channels);
    var inputData_size = width * height * channels;
    var internal_data: Array<byte> = Array<byte>.new(inputData_size);
    for (i = 0; i < inputData_size; i++) {
        internal_data[i] = (inputData + i).load<byte>();
    }

    return Pointer.atContents(imgProc.grayscale_wasm(internal_data));
}

def main() {}

export some_data_out;
export malloc_u8;
export imgProc_invert;
export imgProc_gray;