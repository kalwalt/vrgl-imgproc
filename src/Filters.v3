class Filters {
    private var width: int;
    private var height: int;
    private var channels: u8;
    private var data: Array<byte>;
    new(width: int, height: int, channels: u8) {
        this.width = width;
        this.height = height;
        this.channels = channels;
        this.data = Array<byte>.new(width * height * channels);
        System.puts("Creating new filter with width: ");
        System.puti(this.width);
        System.puts(", height: ");
        System.puti(this.height);
        System.puts(", channels: ");
        System.puti(channels);
        System.puts("\n");
    }
}

class ImgProc extends Filters {
    new(width: int, height: int, channels: u8) super(width, height, channels) { }
    def grayscale(src: Array<byte>) {
        var r: u8;
        var g: u8;
        var b: u8;
        var q: u8 = 0;
        var imageSize = this.width * this.height;
        var cn = this.channels;
        for (p = 0; p < imageSize; p++) {
            r = src[q + 0];
            g = src[q + 1];
            b = src[q + 2];
            // https://stackoverflow.com/a/596241/5843642
            data[p] = (r + r + r + b + g + g + g + g) >> 3;
            q += cn;
        }

    }
}

component IProc {
    private var imgProc: ImgProc;

    def init(width: int, height: int, channels: u8) {
        imgProc = ImgProc.new(width, height, channels);
    }
    def grayscale(src: Array<byte>) { imgProc.grayscale(src); }
}

//export IProc;